graph HelloReverb [[ main ]]
{
    output stream float out0, out1;

	input event float32 freq [[ name: "freq", group: "/v:clarinet/h:midi/freq", min: 5e+01f, max: 1e+03f, init: 4.4e+02f, step: 0.01f, meta_style0: "knob" ]];
	input event float32 bend [[ name: "bend", group: "/v:clarinet/h:midi/bend", min: -2.0f, max: 2.0f, init: 0.0f, step: 0.01f, meta_hidden0: "1", meta_midi0: "pitchwheel", meta_style1: "knob" ]];
	input event float32 gain [[ name: "gain", group: "/v:clarinet/h:midi/gain", min: 0.0f, max: 1.0f, init: 0.6f, step: 0.01f, meta_style2: "knob" ]];
	input event float32 envAttack [[ name: "envAttack", group: "/v:clarinet/h:midi/envAttack", min: 0.0f, max: 3e+01f, init: 1.0f, step: 0.01f, meta_style3: "knob" ]];
	input event float32 sustain [[ name: "sustain", group: "/v:clarinet/h:midi/sustain", min: 0.0f, max: 1.0f, init: 0.0f, step: 1.0f, meta_hidden1: "1", meta_midi1: "ctrl 64", meta_style4: "knob" ]];
	input event float32 reedStiffness [[ name: "reedStiffness", group: "/v:clarinet/h:otherParams/reedStiffness", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi2: "ctrl 1", meta_style5: "knob" ]];
	input event float32 bellOpening [[ name: "bellOpening", group: "/v:clarinet/h:otherParams/bellOpening", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi3: "ctrl 3", meta_style6: "knob" ]];
	input event float32 vibratoFreq [[ name: "vibratoFreq", group: "/v:clarinet/h:otherParams/vibratoFreq", min: 1.0f, max: 1e+01f, init: 5.0f, step: 0.01f, meta_style7: "knob" ]];
	input event float32 vibratoGain [[ name: "vibratoGain", group: "/v:clarinet/h:otherParams/vibratoGain", min: 0.0f, max: 1.0f, init: 0.25f, step: 0.01f, meta_style8: "knob" ]];
	input event float32 outGain [[ name: "outGain", group: "/v:clarinet/h:otherParams/outGain", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_style9: "knob" ]];
	input event float32 gate [[ name: "gate", group: "/v:clarinet/gate", text: "off|on", boolean ]];        

    node Hello = HelloWorld;
    node Reverb = faust::reverb;
    node Echo = faust::echo;
    node Clarinet = faust::voice;

    connection
    {
        // This depends of the actual Faust voice (clarinet_ui_MIDI here), how to code this section in a generic way?
        gate -> Clarinet.gate;
        freq -> Clarinet.freq;
        
        /*
        Hello.out -> Reverb.input0, Reverb.input1;

        Reverb.output0 -> Echo.input0;
        Reverb.output1 -> Echo.input1;

        Echo.output0 -> out0;
        Echo.output1 -> out1;
        */
       
        Clarinet.output0 -> Reverb.input0;
        Clarinet.output1 -> Reverb.input1;

        Reverb.output0 -> Echo.input0;
        Reverb.output1 -> Echo.input1;

        Echo.output0 -> out0;
        Echo.output1 -> out1;
    }
}