
processor ClassicRingtone
{
    output stream float out;

    // This simple struct holds a note + duration for our melody
    struct Note
    {
        int pitch, length;

        void play() const
        {
            let numFrames = this.length * framesPerQuarterNote;
            let frequency  = std::notes::noteToFrequency (this.pitch);
            let phaseDelta = float (frequency * processor.period * twoPi);

            loop (numFrames)
            {
                out <- volume * sin (phase);
                phase = addModulo2Pi (phase, phaseDelta);
                advance();
            }
        }
    }

    // This is our processor's entry-point function, which is invoked
    // by the system
    void main()
    {
        let melody = Note[] ( (79, 1),  (77, 1),  (69, 2),  (71, 2),
                              (76, 1),  (74, 1),  (65, 2),  (67, 2),
                              (74, 1),  (72, 1),  (64, 2),  (67, 2),
                              (72, 4) );

        for (wrap<melody.size> i)
            melody[i].play();
    }

    // We'll define a couple of constants here to set the volume and tempo
    let volume = 0.15f;
    let framesPerQuarterNote = int (processor.frequency / 7);

    float phase;
}

graph sequence [[main]]
{
    // Events to control Faust Synth
    input event float32 freq [[ name: "freq", path: "/addSynth/freq", min: 100.0f, max: 2000.0f, init: 500.0f, step: 0.01f, unit: "Hz" ]];
    input event float32 volume [[ name: "volume", path: "/addSynth/volume", min: -96.0f, max: 0.0f, init: -20.0f, step: 0.100000001f, unit: "dB" ]];

    // Events to control Faust Echo
    input event float32 gain [[ name: "gain", path: "/stereoEcho/gain", min: 0.0f, max: 1.0f, init: 0.5, step: 0.01f ]];
    input event float32 feedback [[ name: "feedback", path: "/stereoEcho/feedback", min: 0.0f, max: 1.0f, init: 0.8, step: 0.01f ]];

    output stream float audioOut0;
    output stream float audioOut1;

    connection 
    {
        // Connect to Faust addSynth
        volume -> faust::addSynth.volume;
        freq -> faust::addSynth.freq;

        // Connect to Faust stereoEcho
        feedback -> faust::stereoEcho.feedback;
        gain -> faust::stereoEcho.gain;

        faust::addSynth.output0 -> faust::stereoEcho.input0;
        ClassicRingtone.out -> faust::stereoEcho.input1;

        faust::stereoEcho.output0 -> audioOut0;
        faust::stereoEcho.output1 -> audioOut1;
    }
}
