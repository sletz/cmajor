/************************************************************************ 
 IMPORTANT NOTE : this file contains two clearly delimited sections :
 the ARCHITECTURE section (in two parts) and the USER section. Each section
 is governed by its own copyright and license. Please check individually
 each section for license and copyright information.
 *************************************************************************/

/******************* BEGIN poly-dsp.cmajor ****************/

/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2019 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 
 ************************************************************************
 ************************************************************************/
 
/*
    Connect the wrapper with the real processor. 
    This indirection is done since the "expose control event" model is not yet in place.
    So we have some 'ad-hoc' code for now that may change in the future
*/
namespace faust {

    graph dsp_voice
    {
        input event (std::notes::NoteOn,
                    std::notes::NoteOff,
                    std::notes::PitchBend) eventIn;

        // This depends of the actual Faust voice (clarinet_ui_MIDI here), how to code this section in a generic way?
        input event float32 bend [[ name: "bend", group: "/v:elecGuitar/h:midi/bend", min: -2.0f, max: 2.0f, init: 0.0f, step: 0.01f, meta_hidden0: "1", meta_midi0: "pitchwheel", meta_style1: "knob" ]];
        input event float32 envAttack [[ name: "envAttack", group: "/v:clarinet/h:midi/envAttack", min: 0.0f, max: 3e+01f, init: 1.0f, step: 0.01f, meta_style3: "knob" ]];
        input event float32 reedStiffness [[ name: "reedStiffness", group: "/v:clarinet/h:otherParams/reedStiffness", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi2: "ctrl 1", meta_style5: "knob" ]];
        input event float32 bellOpening [[ name: "bellOpening", group: "/v:clarinet/h:otherParams/bellOpening", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi3: "ctrl 3", meta_style6: "knob" ]];
        input event float32 vibratoFreq [[ name: "vibratoFreq", group: "/v:clarinet/h:otherParams/vibratoFreq", min: 1.0f, max: 1e+01f, init: 5.0f, step: 0.01f, meta_style7: "knob" ]];
        input event float32 vibratoGain [[ name: "vibratoGain", group: "/v:clarinet/h:otherParams/vibratoGain", min: 0.0f, max: 1.0f, init: 0.25f, step: 0.01f, meta_style8: "knob" ]];

        output stream float audioOut0;
        output stream float audioOut1;

        // This depends of the actual Faust voice (clarinet_ui_MIDI here), how to code this section in a generic way?
        event bend (float32 val)
        {
            faust::voice.bend <- val;
        }

        event envAttack (float32 val)
        {
            faust::voice.envAttack <- val;
        }

        event reedStiffness (float32 val)
        {
            faust::voice.reedStiffness <- val;
        }

        event bellOpening (float32 val)
        {
            faust::voice.bellOpening <- val;
        }

        event vibratoFreq (float32 val)
        {
            faust::voice.vibratoFreq <- val;
        }

        event vibratoGain (float32 val)
        {
            faust::voice.vibratoGain <- val;
        }

        // Note events
        event eventIn (std::notes::NoteOn e)
        {
            faust::voice.freq <- std::notes::noteToFrequency (e.pitch);
            faust::voice.gain <- e.velocity;
            faust::voice.gate <- 1.0f;
        }

        event eventIn (std::notes::NoteOff e)
        { 
            faust::voice.gate <- 0.0f;
        }
        
        event eventIn (std::notes::PitchBend e)
        {
            // TODO
        }

        connection
        {        
            faust::voice.output0 ->  audioOut0;
            faust::voice.output1 ->  audioOut1;
        }
    }

    // Allocates voices, does dynamic voice management, connect to MIDI parser
    graph mydsp_poly [[ main ]]
    {
        input event std::midi::Message midiIn;
        output stream float audioOut0;
        output stream float audioOut1;
        
        // This depends of the actual Faust voice (clarinet_ui_MIDI here), how to code this section in a generic way?
        input event float32 bend [[ name: "bend", group: "/v:elecGuitar/h:midi/bend", min: -2.0f, max: 2.0f, init: 0.0f, step: 0.01f, meta_hidden0: "1", meta_midi0: "pitchwheel", meta_style1: "knob" ]];
        input event float32 envAttack [[ name: "envAttack", group: "/v:clarinet/h:midi/envAttack", min: 0.0f, max: 3e+01f, init: 1.0f, step: 0.01f, meta_style3: "knob" ]];
        input event float32 reedStiffness [[ name: "reedStiffness", group: "/v:clarinet/h:otherParams/reedStiffness", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi2: "ctrl 1", meta_style5: "knob" ]];
        input event float32 bellOpening [[ name: "bellOpening", group: "/v:clarinet/h:otherParams/bellOpening", min: 0.0f, max: 1.0f, init: 0.5f, step: 0.01f, meta_midi3: "ctrl 3", meta_style6: "knob" ]];
        input event float32 vibratoFreq [[ name: "vibratoFreq", group: "/v:clarinet/h:otherParams/vibratoFreq", min: 1.0f, max: 1e+01f, init: 5.0f, step: 0.01f, meta_style7: "knob" ]];
        input event float32 vibratoGain [[ name: "vibratoGain", group: "/v:clarinet/h:otherParams/vibratoGain", min: 0.0f, max: 1.0f, init: 0.25f, step: 0.01f, meta_style8: "knob" ]];

        node
        {
            midiParser = std::midi::MPEConverter;
            voices = dsp_voice[32];
            voiceAllocator = std::voices::VoiceAllocator (32);
        }
         
        connection
        {
            //midiIn -> midiParser -> voiceAllocator -> voices;
            midiIn -> midiParser -> voiceAllocator;
            voiceAllocator.voiceEventOut -> voices.eventIn;

            // This depends of the actual Faust voice (clarinet_ui_MIDI here), how to code this section in a generic way?
            bend -> voices.bend;
            envAttack -> voices.envAttack;
            reedStiffness -> voices.reedStiffness;
            bellOpening -> voices.bellOpening;
            vibratoFreq -> voices.vibratoFreq;
            vibratoGain-> voices.vibratoGain;
       
            // Sum the voices audio out to the output
            voices.audioOut0 -> audioOut0;
            voices.audioOut1 -> audioOut1;
        }
    }
}

/******************** END poly-dsp.cmajor ****************/
